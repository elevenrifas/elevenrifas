#!/usr/bin/env node

/**
 * ‚ö° MIGRACI√ìN A AUTENTICACI√ìN S√öPER SIMPLE
 * ========================================
 * Script para migrar al sistema m√°s simple posible
 * Solo storage local, sin cache complejo, m√°xima velocidad
 * ========================================
 */

const fs = require('fs')
const path = require('path')

console.log('‚ö° Iniciando migraci√≥n a autenticaci√≥n s√∫per simple...\n')

// Archivos a migrar
const migrations = [
  {
    file: 'app/admin/(panel)/layout.tsx',
    changes: [
      {
        from: 'import { AdminAuthProviderSimple } from "@/lib/context/AdminAuthContextSimple";',
        to: 'import { AdminAuthProviderSimpleStorage } from "@/lib/context/AdminAuthContextSimpleStorage";'
      },
      {
        from: 'import { ProtectedRoute } from "../components/protected-route";',
        to: 'import { ProtectedRouteSimple } from "../components/protected-route-simple";'
      },
      {
        from: '<AdminAuthProviderSimple>',
        to: '<AdminAuthProviderSimpleStorage>'
      },
      {
        from: '<ProtectedRoute>',
        to: '<ProtectedRouteSimple>'
      },
      {
        from: '</ProtectedRoute>',
        to: '</ProtectedRouteSimple>'
      },
      {
        from: '</AdminAuthProviderSimple>',
        to: '</AdminAuthProviderSimpleStorage>'
      }
    ]
  }
]

async function migrateFile(filePath, changes) {
  try {
    const fullPath = path.join(process.cwd(), filePath)
    
    if (!fs.existsSync(fullPath)) {
      console.log(`‚ö†Ô∏è  Archivo no encontrado: ${filePath}`)
      return false
    }

    let content = fs.readFileSync(fullPath, 'utf8')
    let modified = false

    changes.forEach(change => {
      if (content.includes(change.from)) {
        content = content.replace(change.from, change.to)
        modified = true
        console.log(`‚úÖ Reemplazado: ${change.from} ‚Üí ${change.to}`)
      }
    })

    if (modified) {
      // Crear backup
      const backupPath = `${fullPath}.backup.${Date.now()}`
      fs.writeFileSync(backupPath, fs.readFileSync(fullPath))
      console.log(`üíæ Backup creado: ${backupPath}`)

      // Escribir archivo modificado
      fs.writeFileSync(fullPath, content)
      console.log(`‚úÖ Archivo migrado: ${filePath}`)
      return true
    } else {
      console.log(`‚ÑπÔ∏è  No se encontraron cambios en: ${filePath}`)
      return false
    }

  } catch (error) {
    console.error(`‚ùå Error migrando ${filePath}:`, error.message)
    return false
  }
}

async function runMigration() {
  console.log('üìã Archivos a migrar:')
  migrations.forEach(migration => {
    console.log(`   - ${migration.file}`)
  })
  console.log('')

  let successCount = 0
  let totalCount = migrations.length

  for (const migration of migrations) {
    console.log(`üîÑ Migrando ${migration.file}...`)
    const success = await migrateFile(migration.file, migration.changes)
    if (success) successCount++
    console.log('')
  }

  console.log('üìä Resumen de migraci√≥n:')
  console.log(`   ‚úÖ Archivos migrados exitosamente: ${successCount}/${totalCount}`)
  
  if (successCount === totalCount) {
    console.log('\nüéâ Migraci√≥n completada exitosamente!')
    console.log('\n‚ö° Caracter√≠sticas del sistema s√∫per simple:')
    console.log('   ‚úÖ Solo verificaci√≥n de storage local')
    console.log('   ‚úÖ Sin cache complejo que cause lentitud')
    console.log('   ‚úÖ Verificaci√≥n instant√°nea')
    console.log('   ‚úÖ Sin procesos gigantes en cada navegaci√≥n')
    console.log('   ‚úÖ M√°xima velocidad y simplicidad')
    console.log('\nüí° C√≥mo funciona:')
    console.log('   1. Primera vez: Verifica sesi√≥n de Supabase')
    console.log('   2. Guarda datos en localStorage por 24 horas')
    console.log('   3. Pr√≥ximas verificaciones: Solo lee storage (instant√°neo)')
    console.log('   4. Si no hay storage: Verifica Supabase una vez m√°s')
    console.log('\nüöÄ Beneficios:')
    console.log('   - Navegaci√≥n instant√°nea')
    console.log('   - Sin "Verificando autenticaci√≥n" constante')
    console.log('   - Sin procesos complejos')
    console.log('   - M√°xima simplicidad')
  } else {
    console.log('\n‚ö†Ô∏è  Migraci√≥n parcial. Revisar errores arriba.')
  }
}

// Ejecutar migraci√≥n
runMigration()
