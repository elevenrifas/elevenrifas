#!/usr/bin/env node

/**
 * Script para corregir la funci√≥n reportar_pago_con_tickets
 * Soluciona el problema del bucle infinito en la generaci√≥n de n√∫meros de ticket
 */

const { database } = require('../config/database');
const { logger } = require('../utils/logger');

async function fixReportarPagoConTickets() {
    try {
        logger.info('üîß Iniciando correcci√≥n de funci√≥n reportar_pago_con_tickets...');
        
        // Leer los archivos SQL corregidos
        const fs = require('fs');
        const path = require('path');
        
        const schemasDir = path.join(__dirname, '../../lib/database/Schemas');
        
        // Aplicar funci√≥n auxiliar generar_numero_ticket
        const generarNumeroTicketSQL = fs.readFileSync(
            path.join(schemasDir, 'generar_numero_ticket.sql'), 
            'utf8'
        );
        
        logger.info('üìù Aplicando funci√≥n auxiliar generar_numero_ticket...');
        const { error: error1 } = await database.query(generarNumeroTicketSQL);
        
        if (error1) {
            logger.error('‚ùå Error al aplicar generar_numero_ticket:', error1);
            return false;
        }
        
        logger.info('‚úÖ Funci√≥n auxiliar aplicada correctamente');
        
        // Aplicar funci√≥n principal corregida
        const reportarPagoSQL = fs.readFileSync(
            path.join(schemasDir, 'reportar_pago_con_tickets'), 
            'utf8'
        );
        
        logger.info('üìù Aplicando funci√≥n principal corregida...');
        const { error: error2 } = await database.query(reportarPagoSQL);
        
        if (error2) {
            logger.error('‚ùå Error al aplicar funci√≥n principal:', error2);
            return false;
        }
        
        logger.info('‚úÖ Funci√≥n principal corregida correctamente');
        
        // Aplicar versi√≥n alternativa (opcional)
        const reportarPagoV2SQL = fs.readFileSync(
            path.join(schemasDir, 'reportar_pago_con_tickets_v2.sql'), 
            'utf8'
        );
        
        logger.info('üìù Aplicando versi√≥n alternativa v2...');
        const { error: error3 } = await database.query(reportarPagoV2SQL);
        
        if (error3) {
            logger.error('‚ùå Error al aplicar versi√≥n v2:', error3);
            // No es cr√≠tico, continuar
        } else {
            logger.info('‚úÖ Versi√≥n alternativa v2 aplicada correctamente');
        }
        
        // Verificar que las funciones existen
        logger.info('üîç Verificando funciones aplicadas...');
        
        const { data: funciones, error: error4 } = await database.query(`
            SELECT routine_name, routine_type 
            FROM information_schema.routines 
            WHERE routine_name IN ('reportar_pago_con_tickets', 'generar_numero_ticket')
            AND routine_schema = 'public'
        `);
        
        if (error4) {
            logger.error('‚ùå Error al verificar funciones:', error4);
            return false;
        }
        
        logger.info('üìä Funciones encontradas:', funciones);
        
        // Test b√°sico de la funci√≥n auxiliar
        logger.info('üß™ Probando funci√≥n auxiliar...');
        try {
            const { data: testResult, error: testError } = await database.query(`
                SELECT generar_numero_ticket('00000000-0000-0000-0000-000000000000'::UUID) as numero_test
            `);
            
            if (testError) {
                logger.warn('‚ö†Ô∏è Funci√≥n auxiliar no pudo ser probada:', testError);
            } else {
                logger.info('‚úÖ Funci√≥n auxiliar probada correctamente:', testResult);
            }
        } catch (testErr) {
            logger.warn('‚ö†Ô∏è Error en test de funci√≥n auxiliar:', testErr.message);
        }
        
        logger.info('üéâ Correcci√≥n completada exitosamente');
        return true;
        
    } catch (error) {
        logger.error('üí• Error fatal en correcci√≥n:', error);
        return false;
    }
}

async function main() {
    try {
        const success = await fixReportarPagoConTickets();
        
        if (success) {
            logger.info('‚úÖ Proceso completado exitosamente');
            process.exit(0);
        } else {
            logger.error('‚ùå Proceso fall√≥');
            process.exit(1);
        }
        
    } catch (error) {
        logger.error('üí• Error en proceso principal:', error);
        process.exit(1);
    }
}

// Ejecutar si se llama directamente
if (require.main === module) {
    main();
}

module.exports = { fixReportarPagoConTickets };

