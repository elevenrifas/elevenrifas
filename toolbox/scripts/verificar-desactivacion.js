#!/usr/bin/env node

/**
 * üîç SCRIPT PARA VERIFICAR QUE EL SISTEMA DE LIMPIEZA EST√â COMPLETAMENTE DESACTIVADO
 * 
 * Este script verifica que no haya ninguna llamada al sistema de limpieza
 * en tu aplicaci√≥n.
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VERIFICANDO DESACTIVACI√ìN COMPLETA DEL SISTEMA DE LIMPIEZA...\n');

// Funci√≥n para verificar archivo layout.tsx
function verificarLayout() {
  const layoutPath = path.join(__dirname, '../../app/layout.tsx');
  
  try {
    const contenido = fs.readFileSync(layoutPath, 'utf8');
    
    console.log('üìÅ VERIFICANDO app/layout.tsx:');
    
    // Verificar import
    const tieneImport = contenido.includes('import { iniciarLimpiezaAutomatica }');
    const tieneImportComentado = contenido.includes('// import { iniciarLimpiezaAutomatica }');
    
    if (tieneImport && !tieneImportComentado) {
      console.log('   ‚ùå IMPORT ACTIVO - El sistema se puede ejecutar');
      return false;
    } else if (tieneImportComentado) {
      console.log('   ‚úÖ IMPORT COMENTADO - No se importar√° el m√≥dulo');
    } else {
      console.log('   ‚úÖ SIN IMPORT - No hay import del m√≥dulo');
    }
    
    // Verificar llamada
    const tieneLlamada = contenido.includes('iniciarLimpiezaAutomatica(');
    const tieneLlamadaComentada = contenido.includes('// iniciarLimpiezaAutomatica(');
    
    if (tieneLlamada && !tieneLlamadaComentada) {
      console.log('   ‚ùå LLAMADA ACTIVA - El sistema se ejecutar√°');
      return false;
    } else if (tieneLlamadaComentada) {
      console.log('   ‚úÖ LLAMADA COMENTADA - No se ejecutar√°');
    } else {
      console.log('   ‚úÖ SIN LLAMADA - No hay llamada a la funci√≥n');
    }
    
    return true;
    
  } catch (error) {
    console.error('   ‚ùå Error al leer layout.tsx:', error.message);
    return false;
  }
}

// Funci√≥n para verificar archivo limpiar-reservas.ts
function verificarCron() {
  const cronPath = path.join(__dirname, '../../lib/cron/limpiar-reservas.ts');
  
  try {
    const contenido = fs.readFileSync(cronPath, 'utf8');
    
    console.log('\nüìÅ VERIFICANDO lib/cron/limpiar-reservas.ts:');
    
    // Verificar auto-inicio
    const tieneAutoInicio = contenido.includes('iniciarLimpiezaAutomatica(1)');
    const tieneAutoInicioComentado = contenido.includes('// iniciarLimpiezaAutomatica(1)');
    
    if (tieneAutoInicio && !tieneAutoInicioComentado) {
      console.log('   ‚ùå AUTO-INICIO ACTIVO - Se ejecutar√° en desarrollo');
      return false;
    } else if (tieneAutoInicioComentado) {
      console.log('   ‚úÖ AUTO-INICIO COMENTADO - No se ejecutar√° autom√°ticamente');
    } else {
      console.log('   ‚úÖ SIN AUTO-INICIO - No hay auto-inicio configurado');
    }
    
    return true;
    
  } catch (error) {
    console.error('   ‚ùå Error al leer limpiar-reservas.ts:', error.message);
    return false;
  }
}

// Funci√≥n para verificar archivo de configuraci√≥n
function verificarConfiguracion() {
  const configPath = path.join(__dirname, '../../.limpieza-desactivada');
  
  try {
    if (fs.existsSync(configPath)) {
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      
      console.log('\nüìÅ VERIFICANDO .limpieza-desactivada:');
      console.log(`   ‚úÖ ARCHIVO EXISTE - Estado: ${config.sistema_limpieza.estado}`);
      console.log(`   üïê Desactivado el: ${config.sistema_limpieza.desactivado_el}`);
      console.log(`   üìù Motivo: ${config.sistema_limpieza.motivo}`);
      
      return true;
    } else {
      console.log('\nüìÅ VERIFICANDO .limpieza-desactivada:');
      console.log('   ‚ùå ARCHIVO NO EXISTE - No hay confirmaci√≥n de desactivaci√≥n');
      return false;
    }
    
  } catch (error) {
    console.error('   ‚ùå Error al leer configuraci√≥n:', error.message);
    return false;
  }
}

// Funci√≥n para verificar b√∫squeda global
function verificarBusquedaGlobal() {
  console.log('\nüîç B√öSQUEDA GLOBAL EN EL PROYECTO:');
  
  try {
    // Buscar en archivos .ts y .tsx
    const archivos = [
      'app/layout.tsx',
      'lib/cron/limpiar-reservas.ts',
      'app/api/limpiar-reservas/route.ts',
      'app/api/admin/estado-sistema/route.ts'
    ];
    
    let totalLlamadas = 0;
    let llamadasActivas = 0;
    
    archivos.forEach(archivo => {
      const archivoPath = path.join(__dirname, '../../', archivo);
      
      if (fs.existsSync(archivoPath)) {
        const contenido = fs.readFileSync(archivoPath, 'utf8');
        
        // Contar llamadas totales
        const llamadas = (contenido.match(/iniciarLimpiezaAutomatica/g) || []).length;
        totalLlamadas += llamadas;
        
        // Contar llamadas activas (no comentadas)
        const llamadasActivasRegex = /(?<!\/\/\s*)iniciarLimpiezaAutomatica/g;
        const llamadasActivasEnArchivo = (contenido.match(llamadasActivasRegex) || []).length;
        llamadasActivas += llamadasActivasEnArchivo;
        
        if (llamadas > 0) {
          console.log(`   üìÑ ${archivo}: ${llamadas} llamadas totales, ${llamadasActivasEnArchivo} activas`);
        }
      }
    });
    
    console.log(`\nüìä RESUMEN DE B√öSQUEDA:`);
    console.log(`   ‚Ä¢ Total de llamadas encontradas: ${totalLlamadas}`);
    console.log(`   ‚Ä¢ Llamadas activas (no comentadas): ${llamadasActivas}`);
    
    if (llamadasActivas === 0) {
      console.log('   ‚úÖ SISTEMA COMPLETAMENTE DESACTIVADO');
      return true;
    } else {
      console.log('   ‚ùå HAY LLAMADAS ACTIVAS - El sistema se puede ejecutar');
      return false;
    }
    
  } catch (error) {
    console.error('   ‚ùå Error en b√∫squeda global:', error.message);
    return false;
  }
}

// Funci√≥n principal
function verificarDesactivacion() {
  console.log('üîç VERIFICACI√ìN COMPLETA DEL SISTEMA DE LIMPIEZA\n');
  
  const layoutOk = verificarLayout();
  const cronOk = verificarCron();
  const configOk = verificarConfiguracion();
  const globalOk = verificarBusquedaGlobal();
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä RESUMEN DE VERIFICACI√ìN:');
  console.log('='.repeat(60));
  
  console.log(`   üìÅ Layout.tsx: ${layoutOk ? '‚úÖ OK' : '‚ùå PROBLEMA'}`);
  console.log(`   ‚è∞ Cron: ${cronOk ? '‚úÖ OK' : '‚ùå PROBLEMA'}`);
  console.log(`   üìÅ Configuraci√≥n: ${configOk ? '‚úÖ OK' : '‚ùå PROBLEMA'}`);
  console.log(`   üîç B√∫squeda global: ${globalOk ? '‚úÖ OK' : '‚ùå PROBLEMA'}`);
  
  const todoOk = layoutOk && cronOk && configOk && globalOk;
  
  if (todoOk) {
    console.log('\nüéâ ¬°SISTEMA COMPLETAMENTE DESACTIVADO!');
    console.log('   ‚Ä¢ No se ejecutar√° limpieza autom√°tica');
    console.log('   ‚Ä¢ No ver√°s logs de limpieza');
    console.log('   ‚Ä¢ Las reservas expiradas NO se liberar√°n autom√°ticamente');
    console.log('\nüí° Para reactivarlo: descomenta las l√≠neas comentadas en los archivos');
  } else {
    console.log('\n‚ö†Ô∏è PROBLEMAS DETECTADOS:');
    console.log('   ‚Ä¢ El sistema puede ejecutarse en algunos casos');
    console.log('   ‚Ä¢ Revisa los archivos marcados con ‚ùå');
    console.log('   ‚Ä¢ Comenta todas las llamadas a iniciarLimpiezaAutomatica');
  }
  
  console.log('\n' + '='.repeat(60));
}

// Ejecutar script
verificarDesactivacion();
