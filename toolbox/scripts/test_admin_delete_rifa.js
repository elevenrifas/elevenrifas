// =====================================================
// üß™ SCRIPT DE PRUEBA - ADMIN DELETE RIFA
// =====================================================
// Script para verificar espec√≠ficamente la funci√≥n adminDeleteRifa
// y detectar problemas en la importaci√≥n o ejecuci√≥n
// =====================================================

console.log('üß™ Iniciando pruebas de adminDeleteRifa...')

// Test 1: Verificar que el archivo existe
console.log('\nüìÅ Test 1: Verificaci√≥n de archivo')
try {
  const fs = require('fs')
  const path = require('path')
  
  // Verificar que el archivo existe
  const filePath = path.join(__dirname, '../../lib/database/admin_database/rifas.ts')
  
  if (fs.existsSync(filePath)) {
    console.log('‚úÖ Test 1 pasado: Archivo rifas.ts existe')
    console.log(`   Ruta: ${filePath}`)
    
    // Verificar contenido del archivo
    const content = fs.readFileSync(filePath, 'utf8')
    if (content.includes('adminDeleteRifa')) {
      console.log('   ‚úÖ Funci√≥n adminDeleteRifa encontrada en el archivo')
    } else {
      console.error('   ‚ùå Funci√≥n adminDeleteRifa NO encontrada en el archivo')
    }
  } else {
    console.error('‚ùå Test 1 fall√≥: Archivo rifas.ts no existe')
  }
} catch (error) {
  console.error('‚ùå Test 1 fall√≥:', error.message)
}

// Test 2: Verificar estructura del archivo
console.log('\nüîç Test 2: Estructura del archivo')
try {
  const fs = require('fs')
  const path = require('path')
  
  const filePath = path.join(__dirname, '../../lib/database/admin_database/rifas.ts')
  const content = fs.readFileSync(filePath, 'utf8')
  
  // Verificar exportaciones
  const exports = [
    'adminListRifas',
    'adminCreateRifa', 
    'adminUpdateRifa',
    'adminDeleteRifa',
    'adminDeleteMultipleRifas',
    'adminChangeRifaState'
  ]
  
  console.log('‚úÖ Test 2 pasado: Verificando exportaciones')
  exports.forEach(exportName => {
    if (content.includes(`export async function ${exportName}`) || 
        content.includes(`export const ${exportName}`) ||
        content.includes(`export { ${exportName}`)) {
      console.log(`   ‚úÖ ${exportName} exportado correctamente`)
    } else {
      console.error(`   ‚ùå ${exportName} NO exportado`)
    }
  })
  
} catch (error) {
  console.error('‚ùå Test 2 fall√≥:', error.message)
}

// Test 3: Verificar sintaxis del archivo
console.log('\nüìù Test 3: Sintaxis del archivo')
try {
  const fs = require('fs')
  const path = require('path')
  
  const filePath = path.join(__dirname, '../../lib/database/admin_database/rifas.ts')
  const content = fs.readFileSync(filePath, 'utf8')
  
  // Verificar que no hay errores de sintaxis b√°sicos
  const syntaxChecks = [
    { name: 'Par√©ntesis balanceados', check: () => {
      const openParens = (content.match(/\(/g) || []).length
      const closeParens = (content.match(/\)/g) || []).length
      return openParens === closeParens
    }},
    { name: 'Llaves balanceadas', check: () => {
      const openBraces = (content.match(/\{/g) || []).length
      const closeBraces = (content.match(/\}/g) || []).length
      return openBraces === closeBraces
    }},
    { name: 'Corchetes balanceados', check: () => {
      const openBrackets = (content.match(/\[/g) || []).length
      const closeBrackets = (content.match(/\]/g) || []).length
      return openBrackets === closeBrackets
    }},
    { name: 'Punto y coma al final', check: () => {
      const lines = content.split('\n')
      const functionLines = lines.filter(line => line.includes('export async function'))
      const hasSemicolons = functionLines.every(line => line.trim().endsWith('}'))
      return hasSemicolons
    }}
  ]
  
  console.log('‚úÖ Test 3 pasado: Verificando sintaxis b√°sica')
  syntaxChecks.forEach(check => {
    try {
      if (check.check()) {
        console.log(`   ‚úÖ ${check.name}: Correcto`)
      } else {
        console.error(`   ‚ùå ${check.name}: Incorrecto`)
      }
    } catch (err) {
      console.error(`   ‚ùå ${check.name}: Error en verificaci√≥n`)
    }
  })
  
} catch (error) {
  console.error('‚ùå Test 3 fall√≥:', error.message)
}

// Test 4: Verificar funci√≥n adminDeleteRifa espec√≠ficamente
console.log('\nüóëÔ∏è Test 4: Funci√≥n adminDeleteRifa')
try {
  const fs = require('fs')
  const path = require('path')
  
  const filePath = path.join(__dirname, '../../lib/database/admin_database/rifas.ts')
  const content = fs.readFileSync(filePath, 'utf8')
  
  // Buscar la funci√≥n adminDeleteRifa
  const functionStart = content.indexOf('export async function adminDeleteRifa')
  if (functionStart === -1) {
    console.error('‚ùå Test 4 fall√≥: Funci√≥n adminDeleteRifa no encontrada')
  } else {
    console.log('‚úÖ Test 4 pasado: Funci√≥n adminDeleteRifa encontrada')
    
    // Extraer la funci√≥n completa
    const functionContent = content.substring(functionStart)
    const functionEnd = functionContent.indexOf('}')
    const functionBody = functionContent.substring(0, functionEnd + 1)
    
    // Verificar elementos importantes de la funci√≥n
    const checks = [
      { name: 'Par√°metro id', check: functionBody.includes('id: string') },
      { name: 'Try-catch', check: functionBody.includes('try {') && functionBody.includes('} catch') },
      { name: 'Verificaci√≥n de rifa existente', check: functionBody.includes('rifaExistente') },
      { name: 'Verificaci√≥n de tickets', check: functionBody.includes('ticketsAsociados') },
      { name: 'Verificaci√≥n de pagos', check: functionBody.includes('pagosAsociados') },
      { name: 'Eliminaci√≥n de BD', check: functionBody.includes('.delete()') },
      { name: 'Retorno de resultado', check: functionBody.includes('return { success:') }
    ]
    
    checks.forEach(check => {
      if (check.check) {
        console.log(`   ‚úÖ ${check.name}: Presente`)
      } else {
        console.error(`   ‚ùå ${check.name}: Faltante`)
      }
    })
  }
  
} catch (error) {
  console.error('‚ùå Test 4 fall√≥:', error.message)
}

// Test 5: Verificar dependencias del archivo
console.log('\nüì¶ Test 5: Dependencias del archivo')
try {
  const fs = require('fs')
  const path = require('path')
  
  const filePath = path.join(__dirname, '../../lib/database/admin_database/rifas.ts')
  const content = fs.readFileSync(filePath, 'utf8')
  
  // Verificar imports
  const imports = [
    'adminSupabase',
    'createAdminQuery',
    'safeAdminQuery'
  ]
  
  console.log('‚úÖ Test 5 pasado: Verificando imports')
  imports.forEach(importName => {
    if (content.includes(importName)) {
      console.log(`   ‚úÖ ${importName}: Importado`)
    } else {
      console.error(`   ‚ùå ${importName}: NO importado`)
    }
  })
  
} catch (error) {
  console.error('‚ùå Test 5 fall√≥:', error.message)
}

// Resumen final
console.log('\nüìä RESUMEN DE PRUEBAS DE ADMIN DELETE RIFA')
console.log('============================================')
console.log('‚úÖ Verificaci√≥n de archivo completada')
console.log('‚úÖ Estructura del archivo verificada')
console.log('‚úÖ Sintaxis b√°sica verificada')
console.log('‚úÖ Funci√≥n adminDeleteRifa verificada')
console.log('‚úÖ Dependencias verificadas')

console.log('\nüéØ PROBLEMAS POTENCIALES IDENTIFICADOS:')
console.log('1. Verificar que la funci√≥n adminDeleteRifa est√© exportada correctamente')
console.log('2. Verificar que no haya errores de sintaxis en el archivo')
console.log('3. Verificar que todas las dependencias est√©n importadas')
console.log('4. Verificar que la funci√≥n tenga la implementaci√≥n correcta')
console.log('5. Verificar que el archivo se compile correctamente')

console.log('\nüîß PR√ìXIMOS PASOS:')
console.log('1. Revisar la consola del navegador para errores espec√≠ficos')
console.log('2. Verificar que el archivo rifas.ts se compile sin errores')
console.log('3. Verificar que la funci√≥n adminDeleteRifa se importe correctamente')
console.log('4. Verificar que la funci√≥n se ejecute sin errores de runtime')

console.log('\nüöÄ Pruebas de adminDeleteRifa completadas!')
