#!/usr/bin/env node

/**
 * üîç SCRIPT PARA VERIFICAR CONFIGURACI√ìN DE ARCHIVOS
 * 
 * Este script verifica que la configuraci√≥n de archivos est√© correcta
 * en la p√°gina de compra y en la API.
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VERIFICANDO CONFIGURACI√ìN DE ARCHIVOS...\n');

// Funci√≥n para verificar p√°gina de compra
function verificarPaginaCompra() {
  const filePath = path.join(__dirname, '../../app/comprar/page.tsx');
  
  try {
    const contenido = fs.readFileSync(filePath, 'utf8');
    
    console.log('üìÅ VERIFICANDO app/comprar/page.tsx:');
    
    // Verificar funci√≥n handleArchivoChange
    const tieneValidacion = contenido.includes('const tiposPermitidos = [\'image/jpeg\', \'image/jpg\', \'image/png\', \'application/pdf\']');
    const tieneValidacionTama√±o = contenido.includes('const tama√±oMaximo = 35 * 1024 * 1024');
    const tieneToastError = contenido.includes('toast.error(\'‚ùå Formato no permitido');
    
    console.log(`  ‚úÖ Funci√≥n de validaci√≥n: ${tieneValidacion ? 'S√ç' : 'NO'}`);
    console.log(`  ‚úÖ Validaci√≥n de tama√±o: ${tieneValidacionTama√±o ? 'S√ç' : 'NO'}`);
    console.log(`  ‚úÖ Toast de error: ${tieneToastError ? 'S√ç' : 'NO'}`);
    
    // Verificar inputs de archivo
    const inputsConAccept = contenido.match(/accept="[^"]*"/g) || [];
    const inputsConTexto = contenido.match(/Formatos permitidos: PNG, JPG, JPEG, PDF/g) || [];
    
    console.log(`  üìé Inputs con accept espec√≠fico: ${inputsConAccept.length}`);
    console.log(`  üìù Inputs con texto de formatos: ${inputsConTexto.length}`);
    
    // Verificar que no haya accept="image/*"
    const tieneImageWildcard = contenido.includes('accept="image/*"');
    console.log(`  üö´ Inputs con accept="image/*": ${tieneImageWildcard ? 'S√ç (PROBLEMA)' : 'NO (CORRECTO)'}`);
    
  } catch (error) {
    console.error('‚ùå ERROR leyendo p√°gina de compra:', error.message);
  }
}

// Funci√≥n para verificar API de comprobantes
function verificarAPIComprobantes() {
  const filePath = path.join(__dirname, '../../app/api/upload-comprobante/route.ts');
  
  try {
    const contenido = fs.readFileSync(filePath, 'utf8');
    
    console.log('\nüìÅ VERIFICANDO app/api/upload-comprobante/route.ts:');
    
    // Verificar tipos permitidos
    const tienePNG = contenido.includes("'image/png'");
    const tieneJPG = contenido.includes("'image/jpg'") || contenido.includes("'image/jpeg'");
    const tienePDF = contenido.includes("'application/pdf'");
    const tieneWebP = contenido.includes("'image/webp'");
    const tieneGIF = contenido.includes("'image/gif'");
    
    console.log(`  ‚úÖ PNG: ${tienePNG ? 'S√ç' : 'NO'}`);
    console.log(`  ‚úÖ JPG/JPEG: ${tieneJPG ? 'S√ç' : 'NO'}`);
    console.log(`  ‚úÖ PDF: ${tienePDF ? 'S√ç' : 'NO'}`);
    console.log(`  üö´ WebP: ${tieneWebP ? 'S√ç (PROBLEMA)' : 'NO (CORRECTO)'}`);
    console.log(`  üö´ GIF: ${tieneGIF ? 'S√ç (PROBLEMA)' : 'NO (CORRECTO)'}`);
    
    // Verificar tama√±o m√°ximo
    const tieneTama√±o35MB = contenido.includes('35 * 1024 * 1024');
    console.log(`  üìè Tama√±o m√°ximo 35MB: ${tieneTama√±o35MB ? 'S√ç' : 'NO'}`);
    
    // Verificar mensajes de error
    const tieneMensajeFormato = contenido.includes('Tipo de archivo no permitido. Solo se aceptan: PNG, JPG, JPEG y PDF');
    const tieneMensajeTama√±o = contenido.includes('Archivo demasiado grande (m√°ximo 35MB)');
    
    console.log(`  üí¨ Mensaje formato: ${tieneMensajeFormato ? 'S√ç' : 'NO'}`);
    console.log(`  üí¨ Mensaje tama√±o: ${tieneMensajeTama√±o ? 'S√ç' : 'NO'}`);
    
  } catch (error) {
    console.error('‚ùå ERROR leyendo API de comprobantes:', error.message);
  }
}

// Funci√≥n para verificar documentaci√≥n
function verificarDocumentacion() {
  const filePath = path.join(__dirname, '../../CONFIGURACION_COMPROBANTES.md');
  
  try {
    const contenido = fs.readFileSync(filePath, 'utf8');
    
    console.log('\nüìÅ VERIFICANDO CONFIGURACION_COMPROBANTES.md:');
    
    const tienePNG = contenido.includes('**PNG**');
    const tieneJPG = contenido.includes('**JPG/JPEG**');
    const tienePDF = contenido.includes('**PDF**');
    const tiene35MB = contenido.includes('**35 MB**');
    
    console.log(`  üìñ PNG documentado: ${tienePNG ? 'S√ç' : 'NO'}`);
    console.log(`  üìñ JPG/JPEG documentado: ${tieneJPG ? 'S√ç' : 'NO'}`);
    console.log(`  üìñ PDF documentado: ${tienePDF ? 'S√ç' : 'NO'}`);
    console.log(`  üìñ 35MB documentado: ${tiene35MB ? 'S√ç' : 'NO'}`);
    
  } catch (error) {
    console.error('‚ùå ERROR leyendo documentaci√≥n:', error.message);
  }
}

// Ejecutar verificaciones
verificarPaginaCompra();
verificarAPIComprobantes();
verificarDocumentacion();

console.log('\nüéØ VERIFICACI√ìN COMPLETADA!');
console.log('üìã Revisa los resultados arriba para confirmar que todo est√© configurado correctamente.');
