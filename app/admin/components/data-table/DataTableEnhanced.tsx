"use client"

import * as React from "react"
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFacetedRowModel,
  getFacetedUniqueValues,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
  Row,
} from "@tanstack/react-table"

import {
  Table as TableUI,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

import { DataTablePagination } from "./DataTablePagination"
import { DataTableToolbar } from "./DataTableToolbar"
import { DataTableHeader, DataTableHeaderAction, actionConfigs } from "./DataTableHeader"

// =====================================================
// üéØ DATA TABLE ENHANCED - ELEVEN RIFAS
// =====================================================
// Tabla unificada y estandarizada para todas las tablas admin
// Incluye header, toolbar, tabla y paginaci√≥n en un solo componente
// =====================================================

export interface DataTableEnhancedProps<TData, TValue> {
  // Datos y columnas
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  
  // Configuraci√≥n del header
  title: string
  description?: string
  headerActions?: DataTableHeaderAction[]
  
  // Configuraci√≥n de b√∫squeda
  searchKey?: string
  searchPlaceholder?: string
  
  // Configuraci√≥n de paginaci√≥n
  pageSize?: number
  pageSizeOptions?: number[]
  
  // Configuraci√≥n de funcionalidades
  showPagination?: boolean
  showToolbar?: boolean
  showSearch?: boolean
  showColumnToggle?: boolean
  showRowSelection?: boolean
  showFacetedFilters?: boolean
  showCreate?: boolean
  
  // Estados
  loading?: boolean
  error?: string | null
  
  // Callbacks
  onRowSelectionChange?: (selectedRows: TData[]) => void
  onRowClick?: (row: Row<TData>) => void
  onCreate?: () => void
  onRefresh?: () => void
  onExport?: () => void
  exportDisabled?: boolean
  
  // Filtros facetados
  facetedFilters?: {
    column: string
    title: string
    options: { label: string; value: string; icon?: React.ComponentType<{ className?: string }> }[]
  }[]
  
  // Estados personalizados
  emptyState?: React.ReactNode
  className?: string
  
  // Configuraciones avanzadas
  enableSorting?: boolean
  enableColumnFilters?: boolean
  enableRowSelection?: boolean
  enableGlobalFilter?: boolean
  globalFilterFn?: (row: any, columnId: string, filterValue: any, addMeta: (meta: any) => void) => boolean | string
}

export function DataTableEnhanced<TData, TValue>({
  // Datos y columnas
  columns,
  data,
  
  // Configuraci√≥n del header
  title,
  description,
  headerActions = [],
  
  // Configuraci√≥n de b√∫squeda
  searchKey,
  searchPlaceholder = "Buscar...",
  
  // Configuraci√≥n de paginaci√≥n
  pageSize = 10,
  pageSizeOptions = [10, 20, 30, 40, 50],
  
  // Configuraci√≥n de funcionalidades
  showPagination = true,
  showToolbar = true,
  showSearch = true,
  showColumnToggle = true,
  showRowSelection = false,
  showFacetedFilters = false,
  showCreate = false,
  
  // Estados
  loading = false,
  error = null,
  
  // Callbacks
  onRowSelectionChange,
  onRowClick,
  onCreate,
  onRefresh,
  onExport,
  exportDisabled = false,
  
  // Filtros facetados
  facetedFilters = [],
  
  // Estados personalizados
  emptyState,
  className = "",
  
  // Configuraciones avanzadas
  enableSorting = true,
  enableColumnFilters = true,
  enableRowSelection = false,
  enableGlobalFilter = true,
  globalFilterFn,
}: DataTableEnhancedProps<TData, TValue>) {
  const [rowSelection, setRowSelection] = React.useState({})
  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [globalFilter, setGlobalFilter] = React.useState("")

  // Generar acciones autom√°ticas si no se proporcionan
  const autoGeneratedActions = React.useMemo(() => {
    if (headerActions.length > 0) return headerActions
    
    // NO generar acciones autom√°ticamente - todas van en el toolbar
    // Esto evita duplicaci√≥n de botones entre header y toolbar
    return []
    
    // Comentado: Generaci√≥n autom√°tica del bot√≥n de crear
    // if (onCreate) {
    //   actions.push({
    //     key: "create",
    //     label: "Crear",
    //     icon: () => <div className="h-4 w-4 mr-2">+</div>,
    //     variant: "default" as const,
    //     onClick: onCreate
    //   })
    // }
  }, [headerActions])

  const finalHeaderActions = headerActions.length > 0 ? headerActions : autoGeneratedActions

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    onGlobalFilterChange: setGlobalFilter,
    getFacetedRowModel: getFacetedRowModel(),
    getFacetedUniqueValues: getFacetedUniqueValues(),
    globalFilterFn: globalFilterFn || "includesString",
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
      globalFilter,
    },
    initialState: {
      pagination: {
        pageSize,
      },
    },
    enableSorting,
    enableColumnFilters,
    enableRowSelection,
    enableGlobalFilter,
  })

  // Manejar cambios en la selecci√≥n de filas
  React.useEffect(() => {
    if (onRowSelectionChange) {
      const selectedRows = table.getFilteredSelectedRowModel().rows.map(row => row.original)
      onRowSelectionChange(selectedRows)
    }
  }, [rowSelection, onRowSelectionChange, table])

  // Contar elementos seleccionados
  const selectedCount = Object.keys(rowSelection).length

  // Mostrar error si existe
  if (error) {
    return (
      <div className="space-y-4">
        <DataTableHeader
          title={title}
          description={description}
          actions={finalHeaderActions}
          selectedCount={selectedCount}
        />
        <div className="p-4 bg-red-50 border border-red-200 rounded-md">
          <p className="text-sm text-red-600">Error: {error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Header con acciones */}
      <DataTableHeader
        title={title}
        description={description}
        actions={finalHeaderActions}
        selectedCount={selectedCount}
      />

      {/* Toolbar */}
      {showToolbar && (
        <DataTableToolbar
          table={table}
          searchKey={searchKey}
          searchPlaceholder={searchPlaceholder}
          showSearch={showSearch}
          showColumnToggle={showColumnToggle}
          showFacetedFilters={showFacetedFilters}
          showRefresh={!!onRefresh}
          showExport={!!onExport}
          showCreate={!!onCreate}
          globalFilter={globalFilter}
          onGlobalFilterChange={setGlobalFilter}
          facetedFilters={facetedFilters}
          onRefresh={onRefresh}
          onExport={onExport}
          onCreate={onCreate}
          exportDisabled={exportDisabled}
          loading={loading}
        />
      )}
      
      {/* Tabla */}
      <div className="overflow-hidden rounded-md border">
        <TableUI>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <TableHead key={header.id} colSpan={header.colSpan}>
                      {header.isPlaceholder ? null : (
                        <div className="flex items-center space-x-2">
                          <span>{header.column.columnDef.header as string || header.column.id}</span>
                          {enableSorting && header.column.getCanSort() && (
                            <button
                              onClick={() => header.column.toggleSorting()}
                              className="ml-2 hover:bg-muted p-1 rounded transition-colors"
                            >
                              {header.column.getIsSorted() === "desc" ? "‚Üì" : 
                               header.column.getIsSorted() === "asc" ? "‚Üë" : "‚Üï"}
                            </button>
                          )}
                        </div>
                      )}
                    </TableHead>
                  )
                })}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary mr-2" />
                    Cargando...
                  </div>
                </TableCell>
              </TableRow>
            ) : table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                  className={onRowClick ? "cursor-pointer hover:bg-muted/50" : ""}
                  onClick={() => onRowClick?.(row)}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  {emptyState || "No hay resultados."}
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </TableUI>
      </div>

      {/* Paginaci√≥n */}
      {showPagination && (
        <DataTablePagination
          table={table}
        />
      )}
    </div>
  )
}

// =====================================================
// üéØ CONFIGURACIONES PREDEFINIDAS - ELEVEN RIFAS
// =====================================================
// Funciones helper para crear tablas con configuraciones comunes
// =====================================================

export function createCRUDTable<TData, TValue>(
  config: Omit<DataTableEnhancedProps<TData, TValue>, 'headerActions'> & {
    onCreate?: () => void
    onExport: () => void
    onRefresh: () => void
    onDelete?: () => void
  }
) {
  const { onCreate, onExport, onRefresh, onDelete, ...rest } = config
  
  // Solo pasar las funciones, las acciones se generan autom√°ticamente
  return (
    <DataTableEnhanced
      {...rest}
      showCreate={!!onCreate} // Solo mostrar crear si se proporciona la funci√≥n
      onCreate={onCreate}
      onRefresh={onRefresh}
      onExport={onExport}
      // Las acciones se generan autom√°ticamente en DataTableEnhanced
    />
  )
}

export function createReadOnlyTable<TData, TValue>(
  config: Omit<DataTableEnhancedProps<TData, TValue>, 'headerActions'> & {
    onExport: () => void
    onRefresh: () => void
  }
) {
  const { onExport, onRefresh, ...rest } = config
  
  // Solo pasar las funciones, las acciones se generan autom√°ticamente
  return (
    <DataTableEnhanced
      {...rest}
      onRefresh={onRefresh}
      onExport={onExport}
      // Las acciones se generan autom√°ticamente en DataTableEnhanced
    />
  )
}

export function createMultiSelectTable<TData, TValue>(
  config: Omit<DataTableEnhancedProps<TData, TValue>, 'headerActions'> & {
    onCreate: () => void
    onExport: () => void
    onRefresh: () => void
    onDelete: () => void
  }
) {
  const { onCreate, onExport, onRefresh, onDelete, ...rest } = config
  
  // Solo pasar las funciones, las acciones se generan autom√°ticamente
  return (
    <DataTableEnhanced
      {...rest}
      showRowSelection={true}
      enableRowSelection={true}
      showCreate={true}
      onCreate={onCreate}
      onRefresh={onRefresh}
      onExport={onExport}
      // Las acciones se generan autom√°ticamente en DataTableEnhanced
    />
  )
}
